name: Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
      - '.github/workflows/tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: BloomUp_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=5s --health-timeout=3s --health-retries=20
    
    env: 
      POSTGRES_HOST: localhost # env
      POSTGRES_PORT: 5432
      POSTGRES_DB: BloomUp_db_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testpassword

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: Run pytest
        working-directory: backend
        env:
          POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ env.POSTGRES_PORT }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: |
          pytest \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: backend
          fail_ci_if_error: false
          verbose: true

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/htmlcov
          retention-days: 30

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run tests
        working-directory: frontend
        run: npm test -- --coverage --passWithNoTests || echo "No tests found"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend
          fail_ci_if_error: false
          verbose: true

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: frontend/coverage
          retention-days: 30

  integration-tests:
    runs-on: ubuntu-latest
    needs: [ backend-tests, frontend-tests ]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: BloomUp_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=5s --health-timeout=3s --health-retries=20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          load: true
          tags: bloomup-api:test
          cache-from: type=gha

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          load: true
          build-args: |
            NEXT_PUBLIC_API_URL=http://localhost:8000
          tags: bloomup-web:test
          cache-from: type=gha

      - name: Start services with docker-compose
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 10

      - name: Verify API is running
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:8000/docs > /dev/null 2>&1; then
              echo "✓ API is healthy"
              exit 0
            fi
            echo "Waiting for API... ($i/30)"
            sleep 2
          done
          echo "✗ API failed to start"
          docker-compose -f docker-compose.yml logs
          exit 1

      - name: Test API endpoints
        run: |
          curl -v http://localhost:8000/docs
          curl -v http://localhost:8000/api/health || echo "Health endpoint not available"

      - name: Collect logs on failure
        if: failure()
        run: docker-compose -f docker-compose.yml logs

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.yml down -v
